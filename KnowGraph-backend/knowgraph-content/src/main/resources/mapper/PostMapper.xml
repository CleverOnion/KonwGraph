<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.cleveronion.knowgraph.content.mapper.PostMapper">

    <resultMap type="com.cleveronion.knowgraph.content.domain.entity.Post" id="PostResult">
        <id     property="id"           column="id"           />
        <result property="userId"       column="user_id"      />
        <result property="categoryId"   column="category_id"  />
        <result property="title"        column="title"        />
        <result property="summary"      column="summary"      />
        <result property="contentMd"    column="content_md"   />
        <result property="contentHtml"  column="content_html" />
        <result property="status"       column="status"       />
        <result property="isFeatured"   column="is_featured"  />
        <result property="publishedAt"  column="published_at" />
        <result property="viewCount"    column="view_count"   />
        <result property="likeCount"    column="like_count"   />
        <result property="commentCount" column="comment_count"/>
        <result property="collectCount" column="collect_count"/>
        <result property="createdAt"    column="created_at"   />
        <result property="updatedAt"    column="updated_at"   />
        <result property="deletedAt"    column="deleted_at"   />
    </resultMap>

    <sql id="selectPostVo">
        select id, user_id, category_id, title, summary, content_md, content_html, status, is_featured, published_at,
               view_count, like_count, comment_count, collect_count, created_at, updated_at, deleted_at
        from posts
    </sql>

    <select id="selectById" resultMap="PostResult">
        <include refid="selectPostVo"/>
        where id = #{id} and deleted_at is null
    </select>

    <insert id="insert" parameterType="com.cleveronion.knowgraph.content.domain.entity.Post" useGeneratedKeys="true" keyProperty="id">
        insert into posts(user_id, category_id, title, summary, content_md, content_html, status, is_featured, published_at, created_at, updated_at)
        values(#{userId}, #{categoryId}, #{title}, #{summary}, #{contentMd}, #{contentHtml}, #{status}, #{isFeatured}, #{publishedAt}, now(), now())
    </insert>

    <select id="selectList" resultMap="PostResult">
        <include refid="selectPostVo"/>
        <if test="query.tagId != null">
            INNER JOIN post_tags pt ON posts.id = pt.post_id
        </if>
        <where>
            posts.deleted_at IS NULL AND posts.status = 'PUBLISHED'
            <if test="query.userId != null">
                AND posts.user_id = #{query.userId}
            </if>
            <if test="query.categoryId != null">
                AND posts.category_id = #{query.categoryId}
            </if>
            <if test="query.tagId != null">
                AND pt.tag_id = #{query.tagId}
            </if>
        </where>
        <choose>
            <when test="query.sort != null and query.sort == 'hot'">
                ORDER BY (posts.view_count + posts.like_count * 5 + posts.comment_count * 10) DESC
            </when>
            <otherwise>
                ORDER BY posts.published_at DESC
            </otherwise>
        </choose>
        <if test="query.size != null and query.page != null">
            LIMIT #{query.size} OFFSET ${(query.page - 1) * query.size}
        </if>
    </select>

    <update id="update" parameterType="com.cleveronion.knowgraph.content.domain.entity.Post">
        update posts
        <set>
            <if test="categoryId != null">category_id = #{categoryId},</if>
            <if test="title != null and title != ''">title = #{title},</if>
            <if test="summary != null and summary != ''">summary = #{summary},</if>
            <if test="contentMd != null and contentMd != ''">content_md = #{contentMd},</if>
            <if test="contentHtml != null and contentHtml != ''">content_html = #{contentHtml},</if>
            updated_at = now()
        </set>
        where id = #{id}
    </update>

    <update id="softDelete">
        update posts
        set deleted_at = now()
        where id = #{id} and user_id = #{userId} and deleted_at is null
    </update>

    <update id="incrementLikeCount">
        update posts set like_count = like_count + 1 where id = #{postId}
    </update>

    <update id="decrementLikeCount">
        update posts set like_count = like_count - 1 where id = #{postId} and like_count > 0
    </update>

    <update id="incrementCommentCount">
        update posts set comment_count = comment_count + 1 where id = #{postId}
    </update>

</mapper> 